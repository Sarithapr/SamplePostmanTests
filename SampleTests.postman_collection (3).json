{
	"info": {
		"_postman_id": "72e8952b-1b7d-4fd2-be6f-ad1ad5120ff2",
		"name": "SampleTests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "3295065"
	},
	"item": [
		{
			"name": "createuser",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 201\", function () {",
							"    pm.expect(pm.response.code).to.equal(201);",
							"});",
							"pm.collectionVariables.set(\"createdId\",pm.response.json().id)",
							"pm.test(\"Response body contains the correct fields\", function () { ",
							"    const responseData = pm.response.json();  ",
							"    pm.expect(responseData).to.have.property(\"data\");",
							"    if (responseData.data) {",
							"        pm.expect(responseData.data).to.have.property(\"name\").and.to.eql(pm.collectionVariables.get(\"name\"));\"",
							"        pm.expect(responseData.data).to.have.property(\"job\");",
							"    }",
							"    pm.expect(responseData).to.have.property(\"id\");",
							"    pm.expect(responseData).to.have.property(\"createdAt\");",
							"",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"//var randomString = Math.random().toString(36).substring(5)",
							"var name = Math.random().toString(36).substring(4)",
							"//var randomLastname = Math.random().toString(36).substring(6)",
							"//var randomNumber = Math.floor(Math.random()*10000)",
							"//console.log(randomString)",
							"//console.log(randomNumber)",
							"//pm.collectionVariables.set(\"randomemail\", randomString+\"@gmail.com\")",
							"//pm.collectionVariables.set(\"randomfirstname\", randomFirstname)",
							"pm.collectionVariables.set(\"name\", name)"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "apikey",
					"apikey": [
						{
							"key": "key",
							"value": "x-api-key",
							"type": "string"
						},
						{
							"key": "value",
							"value": "reqres-free-v1",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "x-api-key",
						"value": "reqres-free-v1",
						"type": "text",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"data\": {\n        \"name\": \"{{name}}\",\n        \"job\": \"QA\"\n    }\n}\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/api/users",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "createuserwithoutbody",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 400\", function () {",
							"    pm.expect(pm.response.code).to.equal(400);",
							"});",
							"pm.collectionVariables.set(\"createdId\",pm.response.json().id)",
							"pm.test(\"Response body contains the correct fields\", function () { ",
							"    const responseData = pm.response.json();  ",
							"    pm.expect(responseData).to.have.property(\"message\").to.equal(\"Something went wrong\");",
							"    pm.expect(responseData).to.have.property(\"requestId\");",
							"    pm.expect(responseData).to.have.property(\"error\");",
							"",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"//var randomString = Math.random().toString(36).substring(5)",
							"var name = Math.random().toString(36).substring(4)",
							"//var randomLastname = Math.random().toString(36).substring(6)",
							"//var randomNumber = Math.floor(Math.random()*10000)",
							"//console.log(randomString)",
							"//console.log(randomNumber)",
							"//pm.collectionVariables.set(\"randomemail\", randomString+\"@gmail.com\")",
							"//pm.collectionVariables.set(\"randomfirstname\", randomFirstname)",
							"pm.collectionVariables.set(\"name\", name)"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {}
			},
			"request": {
				"auth": {
					"type": "apikey",
					"apikey": [
						{
							"key": "key",
							"value": "x-api-key",
							"type": "string"
						},
						{
							"key": "value",
							"value": "reqres-free-v1",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "x-api-key",
						"value": "reqres-free-v1",
						"type": "text",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": "\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/api/users",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "createuserauthorizationerror",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 403\", function () {",
							"    pm.expect(pm.response.code).to.equal(403);",
							"});",
							"",
							"pm.test(\"Response body contains the correct fields\", function () { ",
							"    const responseData = pm.response.json();  ",
							"    pm.expect(responseData).to.have.property(\"error\");",
							"    if (responseData.error) {",
							"        pm.expect(responseData.data).to.have.property(\"error\").and.to.eql(\"Invalid or inactive API key\");",
							"    }",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"//var randomString = Math.random().toString(36).substring(5)",
							"var name = Math.random().toString(36).substring(4)",
							"//var randomLastname = Math.random().toString(36).substring(6)",
							"//var randomNumber = Math.floor(Math.random()*10000)",
							"//console.log(randomString)",
							"//console.log(randomNumber)",
							"//pm.collectionVariables.set(\"randomemail\", randomString+\"@gmail.com\")",
							"//pm.collectionVariables.set(\"randomfirstname\", randomFirstname)",
							"pm.collectionVariables.set(\"name\", name)"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "apikey",
					"apikey": [
						{
							"key": "value",
							"value": "reqres-free-v1dsdd",
							"type": "string"
						},
						{
							"key": "key",
							"value": "x-api-key",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "x-api-key",
						"value": "reqres-free-v1",
						"type": "text",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"data\": {\n        \"name\": \"{{name}}\",\n        \"job\": \"QA\"\n    }\n}\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/api/users",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "getuser",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"});",
							"pm.test(\"Response body contains the correct fields\", function () { ",
							"    const responseData = pm.response.json();  ",
							"    ",
							"    // Check for properties in the data object",
							"    pm.expect(responseData).to.have.property(\"data\");",
							"    if (responseData.data) {",
							"        pm.expect(responseData.data).to.have.property(\"email\");",
							"        pm.expect(responseData.data).to.have.property(\"first_name\");",
							"        pm.expect(responseData.data).to.have.property(\"last_name\");",
							"        pm.expect(responseData.data).to.have.property(\"avatar\");",
							"    }",
							"",
							"    // Check for properties in the support object",
							"    pm.expect(responseData).to.have.property(\"support\");",
							"    if (responseData.support) {",
							"        pm.expect(responseData.support).to.have.property(\"url\");",
							"        pm.expect(responseData.support).to.have.property(\"text\");",
							"    }",
							"",
							"    // Check for the id property",
							"    pm.expect(responseData).to.have.property(\"id\").that.is.a('number').and.to.eql(pm.environment.get(\"createdId\"));",
							"});",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "apikey",
					"apikey": [
						{
							"key": "key",
							"value": "x-api-key",
							"type": "string"
						},
						{
							"key": "value",
							"value": "reqres-free-v1",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/api/users/{{createdId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"users",
						"{{createdId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "getusers",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"var data = pm.response.json();",
							"pm.test(\"Response status code is 200 and its GET request\", function () {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"    pm.expect(pm.request.method).to.eql(\"GET\");",
							"});",
							"pm.test(\"Check the content type header\",function(){",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json; charset=utf-8\");",
							"});",
							"",
							"pm.test(\"Check the response Id\", function () {",
							"    data.data.forEach((user) => {",
							"        pm.expect(user.id).to.not.be.null;",
							"    });",
							"});",
							"pm.test(\"Check the response\", function () {",
							"    data.data.forEach((user) => {",
							"        pm.expect(user).to.have.keys(\"id\",\"email\",\"first_name\",\"last_name\",\"avatar\");",
							"    });",
							"});",
							"pm.test(\"Check its valid email\", function () {",
							"    data.data.forEach((user) => {",
							"        pm.expect(user.email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/, \"Invalid email\");",
							"    });",
							"});",
							"pm.test(\"Check if all users have email\", function () {",
							"    data.data.forEach((user) => {",
							"        pm.expect(user).to.not.have.property('error');",
							"        pm.expect(user).to.have.property('email').that.is.a('string').and.to.have.lengthOf.at.least(1, \"Email should not be empty\");",
							"    });",
							"});",
							"pm.test(\"Check if id is unique and not null or undefined\", function () {",
							"    pm.expect(data).to.be.an('object');",
							"    pm.expect(data.data).to.be.an('array');",
							"    const ids = data.data.map(user => user.id);",
							"    data.data.forEach((user) => {",
							"        const hasNonEmptyFieldId = Object.values(user).every(value => value !== undefined && value !== \"\" && value !== null);",
							"        pm.expect(hasNonEmptyFieldId).to.be.true;",
							"    });",
							"    const uniqueid = new Set(ids);",
							"    pm.expect(uniqueid.size).to.equal(ids.length, \"All ids are not unique\");",
							"});",
							"pm.test(\"Check if each value in data has some non-empty field\", function () {",
							"    data.data.forEach((user) => {",
							"        const hasNonEmptyField = Object.values(user).some(value => value !== \"\");",
							"        pm.expect(hasNonEmptyField).to.be.true;",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"Check for presence of 'Ratelimit-Remaining' header and ensure it is a non-negative integer\", function () {",
							"    pm.expect(pm.response.headers.has('Ratelimit-Remaining')).to.be.true;",
							"    const rateLimitRemaining = parseInt(pm.response.headers.get('Ratelimit-Remaining'), 10);",
							"    pm.expect(rateLimitRemaining).to.be.a('number').and.to.be.at.least(0);",
							"});",
							"",
							"pm.test(\"Response includes pagination information\", function () {",
							"    pm.expect(data).to.have.property('page').that.is.greaterThan(0);",
							"    pm.expect(data).to.have.property('per_page').that.is.greaterThan(0); ",
							"    pm.expect(data).to.have.property('total').that.is.greaterThan(0);",
							"    pm.expect(data).to.have.property('total_pages').that.is.greaterThan(0);",
							"});",
							"",
							"pm.test(\"Test if id is sorted in ascending order\", function () {",
							"    const sortedData = [...data.data].sort((a, b) => a.id - b.id);",
							"    pm.expect(data.data).to.deep.equal(sortedData, \"Response data is not sorted by 'id'\");",
							"});",
							"",
							"pm.test(\"Data per page\", function () {",
							"    pm.expect(data.per_page).to.eql(6, \"Response data is not displayed correctly per page'\");",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/api/users",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "putuser",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var moment = require('moment');",
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"pm.test(\"Response body contains the correct data\", function () {   ",
							"    const responseData = pm.response.json(); ",
							"    let updatedAtMinute = moment.utc(responseData.updatedAt).format(\"YYYY-MM-DDTHH:mm\");",
							"    let nowMinute = moment.utc().format(\"YYYY-MM-DDTHH:mm\");    ",
							"    if (responseData.data) {",
							"        pm.expect(responseData.data).to.have.property(\"job\").that.equals(\"Dev\");",
							"        pm.expect(responseData.data).to.have.property(\"name\").that.equals(\"testuser\");",
							"    }",
							"    pm.expect(updatedAtMinute).to.eql(nowMinute);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "apikey",
					"apikey": [
						{
							"key": "key",
							"value": "x-api-key",
							"type": "string"
						},
						{
							"key": "value",
							"value": "reqres-free-v1",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"data\": {\n        \"name\": \"testuser\",\n        \"job\": \"Dev\"\n    }\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/api/users/{{createdId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"users",
						"{{createdId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "deleteuser",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 204\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([204,404]);",
							"});",
							"",
							"",
							"",
							"pm.collectionVariables.unset(\"createdId\")",
							"pm.globals.unset(\"now\")",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "apikey",
					"apikey": [
						{
							"key": "key",
							"value": "x-api-key",
							"type": "string"
						},
						{
							"key": "value",
							"value": "reqres-free-v1",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/api/users/{{createdId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"users",
						"{{createdId}}"
					],
					"query": [
						{
							"key": "",
							"value": null,
							"disabled": true
						}
					]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "apikey",
		"apikey": [
			{
				"key": "value",
				"value": "reqres-free-v1",
				"type": "string"
			},
			{
				"key": "key",
				"value": "x-api-key",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"pm.collectionVariables.set(\"baseUrl\",\"https://reqres.in\")"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "jsonSchema",
			"value": ""
		},
		{
			"key": "baseUrl",
			"value": ""
		},
		{
			"key": "randomEmail",
			"value": ""
		},
		{
			"key": "name",
			"value": ""
		},
		{
			"key": "createdId",
			"value": ""
		}
	]
}